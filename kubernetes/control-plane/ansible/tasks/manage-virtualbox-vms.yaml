- name: Download and prepare cloud image
  block:
    - name: Check if cloud image exists
      win_stat:
        path: C:\Users\{{ ansible_user }}\Downloads\ubuntu-22.04-server-cloudimg-amd64.vmdk
      register: cloud_image
      changed_when: false

    - name: Download cloud image if not exists
      win_get_url:
        url: https://cloud-images.ubuntu.com/releases/jammy/release-20250516/ubuntu-22.04-server-cloudimg-amd64.vmdk
        dest: C:\Users\{{ ansible_user }}\Downloads\ubuntu-22.04-server-cloudimg-amd64.vmdk
      when: not cloud_image.stat.exists

    - name: Copy cloud-init config to Windows
      win_copy:
        src: ../files/cloud-init.iso
        dest: C:\Users\{{ ansible_user }}\Downloads\cloud-init.iso

- name: Create and configure VM
  block:
    - name: Check if VM already exists
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" list vms'
      register: existing_vms
      changed_when: false

    - name: Create VM if not exists
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" createvm --name "{{ virtualbox_ubuntu_vm_name }}" --ostype "Ubuntu_64" --register'
      when: not (virtualbox_ubuntu_vm_name in existing_vms.stdout)

    - name: Get VM state
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" showvminfo "{{ virtualbox_ubuntu_vm_name }}" --machinereadable'
      register: vm_state
      changed_when: false

    - name: Stop VM if running
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" controlvm "{{ virtualbox_ubuntu_vm_name }}" poweroff'
      when: '"VMState=\"running\"" in vm_state.stdout'
      ignore_errors: true

    - name: Wait for VM lock to be released
      win_wait_for:
        timeout: 30
      when: '"VMState=\"running\"" in vm_state.stdout'

    - name: Configure VM settings
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" modifyvm "{{ virtualbox_ubuntu_vm_name }}" --memory 4096 --cpus 2 --acpi on --nic1 bridged --bridgeadapter1 "Realtek PCIe GbE Family Controller #2"'
      register: configure_vm
      retries: 3
      delay: 10
      until: configure_vm is not failed

    - name: Check if VM has storage controller
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" showvminfo "{{ virtualbox_ubuntu_vm_name }}" --machinereadable'
      register: vm_info
      changed_when: false

    - name: Add storage controllers
      block:
        - name: Add SATA controller
          win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" storagectl "{{ virtualbox_ubuntu_vm_name }}" --name "SATA Controller" --add sata --controller IntelAHCI'

        - name: Add IDE controller for cloud-init
          win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" storagectl "{{ virtualbox_ubuntu_vm_name }}" --name "IDE Controller" --add ide'
      when: '"SATA Controller" not in vm_info.stdout'

    - name: Attach cloud image as main disk
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" storageattach "{{ virtualbox_ubuntu_vm_name }}" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium "C:\Users\{{ ansible_user }}\Downloads\ubuntu-22.04-server-cloudimg-amd64.vmdk"'

    - name: Attach cloud-init ISO
      win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" storageattach "{{ virtualbox_ubuntu_vm_name }}" --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium "C:\Users\{{ ansible_user }}\Downloads\cloud-init.iso"'

- name: Start VM
  win_command: '"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" startvm "{{ virtualbox_ubuntu_vm_name }}" --type headless'
