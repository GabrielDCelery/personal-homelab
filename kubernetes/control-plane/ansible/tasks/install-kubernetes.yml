- name: Update apt package cache
  become: true
  apt:
    update_cache: yes

- name: Install required packages for Kubernetes
  become: true
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
    state: present

- name: Disable swap
  become: true
  ansible.builtin.command: swapoff -a

- name: Disable swap in /etc/fstab
  become: true
  ansible.builtin.replace:
    path: /etc/fstab
    # Any line that that does not already start with # - [^#]
    # .*? contains any characters
    # `\sswap\s+sw\s+` matches swap entries looking for
    # `\s` whitespace
    # `swap` literal word swap
    # `\s+` one or more whitespace
    # `sw` the swap flag in fstab
    # `(.*)$ captures the rest of the line until the end`
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    # Adds a # comment character at the start of the line
    # `\1` refers to the entire matched line in the regexp
    replace: '# \1'

- name: Add Kubernetes GPG key
  become: true
  ansible.builtin.shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Set up Kubernetes repository
  become: true
  shell: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

- name: Update apt package cache
  become: true
  apt:
    update_cache: yes

- name: Install Kubernetes packages
  become: true
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Enable and start kubelet service
  become: true
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes
    state: started

- name: Remove containerd config file if exists (to revert containerd config to default)
  become: true
  ansible.builtin.file:
    path: /etc/containerd/config.toml
    state: absent

- name: Restart containerd service
  become: true
  ansible.builtin.systemd:
    name: containerd
    state: restarted

- name: Install UFW
  become: true
  ansible.builtin.apt:
    name: ufw
    state: present

- name: Allow SSH access
  become: true
  ansible.builtin.ufw:
    rule: allow
    port: "22"
    proto: tcp

- name: Allow required Kubernetes control plane ports
  become: true
  ansible.builtin.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "6443" # Kubernetes API server
    - "2379" # etcd server client API
    - "2380" # etcd server client API
    - "10250" # Kubelet API
    - "10259" # kube-scheduler
    - "10257" # kube-controller-manager

- name: Allow required Kubernetes worker node ports
  become: true
  ansible.builtin.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "10250" # Kubelet API
    - "30000:32767" # NodePort Services

- name: Enable UFW
  become: true
  ansible.builtin.ufw:
    state: enabled
    policy: deny
    logging: 'on'

- name: Copy kubeadm configuration file
  become: true
  ansible.builtin.copy:
    src: remote-configs/kubeadm-config.yaml
    dest: /root/kubeadm-config.yaml
    mode: '0644'

- name: Initialize Kubernetes cluster using configuration file
  become: true
  ansible.builtin.command: kubeadm init --config /root/kubeadm-config.yaml
  register: kubeadm_init
  # Only run if the cluster hasn't been initialized yet
  args:
    creates: /etc/kubernetes/admin.conf

- name: Display kubeadm init output
  debug:
    var: kubeadm_init.stdout_lines
  when: kubeadm_init.changed

- name: Create .kube directory in user home
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'

- name: Copy Kubernetes admin.conf to user's kube config
  become: true
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
    mode: '0600'

- name: Set ownership of kube config to current user
  become: true
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.kube/config"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0600'

